// Generated by dts-bundle-generator v9.5.1

export type CometRequest = {
	url: URL;
	method: string;
	contentType: string | null;
	args: Record<string, any>;
	params: Record<string, string>;
	files: Record<string, Array<File>>;
	headers: Record<string, string>;
	cookies: Record<string, string>;
};
declare enum HttpStatusCode {
	Continue = 100,
	SwitchingProtocols = 101,
	Processing = 102,
	EarlyHints = 103,
	OK = 200,
	Created = 201,
	Accepted = 202,
	NonAuthoritativeInformation = 203,
	NoContent = 204,
	ResetContent = 205,
	PartialContent = 206,
	MultiStatus = 207,
	AlreadyReported = 208,
	IMUsed = 226,
	MultipleChoices = 300,
	MovedPermanently = 301,
	Found = 302,
	SeeOther = 303,
	NotModified = 304,
	UseProxy = 305,
	TemporaryRedirect = 307,
	PermanentRedirect = 308,
	BadRequest = 400,
	Unauthorized = 401,
	PaymentRequired = 402,
	Forbidden = 403,
	NotFound = 404,
	MethodNotAllowed = 405,
	NotAcceptable = 406,
	ProxyAuthenticationRequired = 407,
	RequestTimeout = 408,
	Conflict = 409,
	Gone = 410,
	LengthRequired = 411,
	PreconditionFailed = 412,
	PayloadTooLarge = 413,
	URITooLong = 414,
	UnsupportedMediaType = 415,
	RangeNotSatisfiable = 416,
	ExpectationFailed = 417,
	ImATeapot = 418,// Just for fun! Defined in RFC 2324
	MisdirectedRequest = 421,
	UnprocessableEntity = 422,
	Locked = 423,
	FailedDependency = 424,
	TooEarly = 425,
	UpgradeRequired = 426,
	PreconditionRequired = 428,
	TooManyRequests = 429,
	RequestHeaderFieldsTooLarge = 431,
	UnavailableForLegalReasons = 451,
	InternalServerError = 500,
	NotImplemented = 501,
	BadGateway = 502,
	ServiceUnavailable = 503,
	GatewayTimeout = 504,
	HTTPVersionNotSupported = 505,
	VariantAlsoNegotiates = 506,
	InsufficientStorage = 507,
	LoopDetected = 508,
	NotExtended = 510,
	NetworkAuthenticationRequired = 511
}
export declare class CometResult {
	#private;
	result: any;
	status: HttpStatusCode;
	type: "json" | "text" | "file";
	get headers(): Readonly<Array<[
		string,
		string
	]>>;
	constructor(result: any, status?: HttpStatusCode, type?: "json" | "text" | "file");
	setStatus(status: HttpStatusCode): CometResult;
	addHeader(name: string, value: string): CometResult;
	static ok(result?: any, type?: "json" | "text"): CometResult;
	static badRequest(result?: any, type?: "json" | "text"): CometResult;
	static forbidden(result?: any, type?: "json" | "text"): CometResult;
	static unauthorized(result?: any, type?: "json" | "text"): CometResult;
	static notFound(result?: any, type?: "json" | "text"): CometResult;
	static conflict(result?: any, type?: "json" | "text"): CometResult;
	static unprocessableEntity(result?: any, type?: "json" | "text"): CometResult;
	static internalServerError(result?: any, type?: "json" | "text"): CometResult;
	noCache(): CometResult;
	cache(time?: number): CometResult;
	contentType(type: string): CometResult;
	setCookie(name: string, value: string, options?: {
		expires?: Date;
		maxAge?: number | string;
		domain?: string;
		path?: string;
		secure?: boolean;
		httpOnly?: boolean;
		sameSite?: "Strict" | "Lax" | "None";
	}): CometResult;
	delCookie(name: string): CometResult;
}
export interface CometAdapter {
	requestParser: (req: any) => Promise<CometRequest>;
	responseFactory: (result: CometResult) => Promise<any>;
}
declare class ApiNotFound {
}
export declare const API_NOT_FOUND: ApiNotFound;
export interface CometApi {
	handleRequest(state: CometRequest): Promise<CometResult | ApiNotFound>;
}
export declare class CometServer {
	private adapter;
	private apis;
	constructor(adapter: CometAdapter, apis?: CometApi[]);
	serve(request: any): Promise<any | undefined>;
}
export type CometState = {
	env: Record<string | symbol, any>;
	id: string;
	api: CometApi;
} & CometRequest;
export type Args<T extends Record<string, any>> = {
	args: T;
};
export type Params<T extends Record<string, any>> = {
	params: T;
};
type Headers$1<T extends Record<string, any>> = {
	headers: T;
};
export type Cookies<T extends Record<string, any>> = {
	cookies: T;
};
export type Env<T extends Record<string | symbol, any>> = {
	env: T;
};
export type Files<T extends Record<string, Array<File> | File>> = {
	env: T;
};
export declare function cwd_log(requestLogger?: undefined | ((state: CometState) => void), responseLogger?: undefined | ((state: CometState, result: CometResult, time: number) => void)): (state: CometState, next: Function) => Promise<Response>;
declare let UNDEFINED: symbol;
declare class IfNotDefined {
	readonly value: any;
	constructor(value: any);
}
export type MetaArg<TYPE> = TYPE | undefined | typeof UNDEFINED | IfNotDefined;
/** Represents a middleware function.
 * @template T - The type of the state object.
 * @param state - The state object to pass through the middleware.
 * @param next - The next middleware function in the pipeline.
 * @returns A promise that resolves after executing the middleware.
 */
export type MiddlewareFn<T = any> = (state: T, next: () => Promise<any>) => Promise<any>;
/** Represents a middleware object.
 * @template T - The type of the state object.
 */
export type Middleware<T = any> = any & {
	handle: MiddlewareFn<T>;
};
export declare function Cmd(name?: MetaArg<string>): (t: any, p?: string) => void;
export declare namespace Cmd {
	var read: (t: any, p?: string) => any;
	var SetEnv: typeof SetEnv;
	var Omit: typeof Omit$1;
	var Remap: typeof Remap;
	var Middleware: typeof Middleware$1;
	var Arg: typeof Arg;
	var Param: typeof Param;
	var Env: typeof Env$1;
	var File: typeof File$1;
	var Header: typeof Header;
	var Cookie: typeof Cookie;
	var State: typeof State;
}
declare function SetEnv(key: string | symbol, value: any): (t: any, p?: string) => void;
declare namespace SetEnv {
	var read: (t: any, p?: string) => {};
}
declare function Omit$1(...method: [
	string,
	...string[]
]): (t: any) => void;
declare namespace Omit$1 {
	var read: (t: any) => any;
}
declare function Remap(map: Record<string, string>): (t: any) => void;
declare namespace Remap {
	var read: (t: any) => any;
}
declare function Middleware$1(...middlewares: Array<Middleware | MiddlewareFn>): (t: any, p?: string) => void;
declare namespace Middleware$1 {
	var read: (t: any, p?: string) => Array<MiddlewareFn | Middleware>;
}
declare function Arg(t: any, p: string, index: number): void;
declare namespace Arg {
	var read: (t: any, p: string) => any;
}
declare function Param(t: any, p: string, index: number): void;
declare namespace Param {
	var read: (t: any, p: string) => any;
}
declare function Env$1(t: any, p: string, index: number): void;
declare namespace Env$1 {
	var read: (t: any, p: string) => any;
}
declare function File$1(t: any, p: string, index: number): void;
declare namespace File$1 {
	var read: (t: any, p: string) => any;
}
declare function Header(t: any, p: string, index: number): void;
declare namespace Header {
	var read: (t: any, p: string) => any;
}
declare function Cookie(t: any, p: string, index: number): void;
declare namespace Cookie {
	var read: (t: any, p: string) => any;
}
declare function State(t: any, p: string, index: number): void;
declare namespace State {
	var read: (t: any, p: string) => any;
}
export declare function fqn(value: TemplateStringsArray): string;
export declare abstract class PrefixApi implements CometApi {
	private readonly prefix;
	private middlewares;
	private readonly pipeline;
	protected constructor(prefix: string, middlewares?: Array<Middleware | MiddlewareFn>);
	protected getSubPath(state: CometState): string;
	private setSubPath;
	protected check(request: CometRequest): boolean;
	protected checkUrl(request: CometRequest): boolean;
	protected checkMethod(request: CometRequest): boolean;
	protected checkContentType(request: CometRequest): boolean;
	protected checkAccess(request: CometRequest): boolean;
	handleRequest(request: CometRequest): Promise<CometResult | typeof API_NOT_FOUND>;
	protected abstract handle(state: CometState): Promise<CometResult>;
}
export declare class CommandApi extends PrefixApi {
	descriptor: Record<string, any>;
	commands: Record<string, (state: CometState) => Promise<CometResult>>;
	constructor(prefix: string, commandSets: any[], middlewares?: Array<Middleware | MiddlewareFn>);
	handle(state: CometState): Promise<CometResult>;
	protected checkMethod(request: CometRequest): boolean;
	protected checkContentType(request: CometRequest): boolean;
}
export declare class FileServerApi extends PrefixApi {
	readonly path: string;
	constructor(prefix: string, path: string, middlewares?: Array<Middleware | MiddlewareFn>);
	protected handle(state: CometState): Promise<CometResult>;
	protected checkMethod(request: CometRequest): boolean;
}

export {
	Headers$1 as Headers,
};

export {};
