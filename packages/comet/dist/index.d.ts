// Generated by dts-bundle-generator v9.5.1

export type CometRequest = {
	url: URL;
	method: string;
	contentType: string | null;
	args: Record<string, any>;
	params: Record<string, string>;
	files: Record<string, Array<File>>;
	headers: Record<string, string>;
	cookies: Record<string, string>;
};
declare let UNDEFINED: symbol;
declare class IfNotDefined {
	readonly value: any;
	constructor(value: any);
}
export type MetaArg<TYPE> = TYPE | undefined | typeof UNDEFINED | IfNotDefined;
/** Represents a middleware function.
 * @template T - The type of the state object.
 * @param state - The state object to pass through the middleware.
 * @param next - The next middleware function in the pipeline.
 * @returns A promise that resolves after executing the middleware.
 */
export type MiddlewareFn<STATE = any, RESULT = any> = (state: STATE, next: () => Promise<RESULT>) => Promise<RESULT>;
/** Represents a middleware object.
 * @template T - The type of the state object.
 */
export type Middleware<STATE = any, RESULT = any> = any & {
	handle: MiddlewareFn<STATE, RESULT>;
};
declare enum HttpStatusCode {
	Continue = 100,
	SwitchingProtocols = 101,
	Processing = 102,
	EarlyHints = 103,
	OK = 200,
	Created = 201,
	Accepted = 202,
	NonAuthoritativeInformation = 203,
	NoContent = 204,
	ResetContent = 205,
	PartialContent = 206,
	MultiStatus = 207,
	AlreadyReported = 208,
	IMUsed = 226,
	MultipleChoices = 300,
	MovedPermanently = 301,
	Found = 302,
	SeeOther = 303,
	NotModified = 304,
	UseProxy = 305,
	TemporaryRedirect = 307,
	PermanentRedirect = 308,
	BadRequest = 400,
	Unauthorized = 401,
	PaymentRequired = 402,
	Forbidden = 403,
	NotFound = 404,
	MethodNotAllowed = 405,
	NotAcceptable = 406,
	ProxyAuthenticationRequired = 407,
	RequestTimeout = 408,
	Conflict = 409,
	Gone = 410,
	LengthRequired = 411,
	PreconditionFailed = 412,
	PayloadTooLarge = 413,
	URITooLong = 414,
	UnsupportedMediaType = 415,
	RangeNotSatisfiable = 416,
	ExpectationFailed = 417,
	ImATeapot = 418,// Just for fun! Defined in RFC 2324
	MisdirectedRequest = 421,
	UnprocessableEntity = 422,
	Locked = 423,
	FailedDependency = 424,
	TooEarly = 425,
	UpgradeRequired = 426,
	PreconditionRequired = 428,
	TooManyRequests = 429,
	RequestHeaderFieldsTooLarge = 431,
	UnavailableForLegalReasons = 451,
	InternalServerError = 500,
	NotImplemented = 501,
	BadGateway = 502,
	ServiceUnavailable = 503,
	GatewayTimeout = 504,
	HTTPVersionNotSupported = 505,
	VariantAlsoNegotiates = 506,
	InsufficientStorage = 507,
	LoopDetected = 508,
	NotExtended = 510,
	NetworkAuthenticationRequired = 511
}
export declare class CometResult {
	#private;
	result: any;
	status: HttpStatusCode;
	type: "json" | "text" | "file";
	get headers(): Readonly<Array<[
		string,
		string
	]>>;
	constructor(result: any, status?: HttpStatusCode, type?: "json" | "text" | "file");
	setStatus(status: HttpStatusCode): CometResult;
	addHeader(name: string, value: string): CometResult;
	static ok(result?: any, type?: "json" | "text"): CometResult;
	static badRequest(result?: any, type?: "json" | "text"): CometResult;
	static forbidden(result?: any, type?: "json" | "text"): CometResult;
	static unauthorized(result?: any, type?: "json" | "text"): CometResult;
	static notFound(result?: any, type?: "json" | "text"): CometResult;
	static conflict(result?: any, type?: "json" | "text"): CometResult;
	static unprocessableEntity(result?: any, type?: "json" | "text"): CometResult;
	static internalServerError(result?: any, type?: "json" | "text"): CometResult;
	noCache(): CometResult;
	cache(time?: number): CometResult;
	contentType(type: string): CometResult;
	setCookie(name: string, value: string, options?: {
		expires?: Date;
		maxAge?: number | string;
		domain?: string;
		path?: string;
		secure?: boolean;
		httpOnly?: boolean;
		sameSite?: "Strict" | "Lax" | "None";
	}): CometResult;
	delCookie(name: string): CometResult;
}
export interface CometAdapter {
	requestParser: (req: any) => Promise<CometRequest>;
	responseFactory: (result: CometResult) => Promise<any>;
}
export declare class DefaultAdapter implements CometAdapter {
	requestParser(request: Request): Promise<CometRequest>;
	responseFactory(result: CometResult): Promise<Response>;
	parseCookieHeader(cookieHeader: string): Record<string, string>;
}
declare class ApiNotFound {
}
export declare const API_NOT_FOUND: ApiNotFound;
export interface CometApi {
	handleRequest(state: CometRequest): Promise<CometResult | ApiNotFound>;
}
export type CometState = {
	env: Record<string | symbol, any>;
	id: string;
	api: CometApi;
} & CometRequest;
export type CometMiddleware = Middleware<CometState, CometResult>;
export type CometMiddlewareFn = MiddlewareFn<CometState, CometResult>;
export type CometMiddlewareKind = CometMiddleware | CometMiddlewareFn;
export declare class CometServer {
	private adapter;
	private apis;
	constructor(adapter: CometAdapter, apis?: CometApi[]);
	serve(request: any): Promise<any | undefined>;
}
export declare abstract class PrefixApi implements CometApi {
	private readonly prefix;
	private middlewares;
	private readonly pipeline;
	protected constructor(prefix: string, middlewares?: Array<CometMiddlewareKind>);
	protected getSubPath(state: CometState): string;
	private setSubPath;
	protected check(request: CometRequest): boolean;
	protected checkUrl(request: CometRequest): boolean;
	protected checkMethod(request: CometRequest): boolean;
	protected checkContentType(request: CometRequest): boolean;
	protected checkAccess(request: CometRequest): boolean;
	handleRequest(request: CometRequest): Promise<CometResult | typeof API_NOT_FOUND>;
	protected abstract handle(state: CometState): Promise<CometResult>;
}
export declare class CommandApi extends PrefixApi {
	descriptor: Record<string, any>;
	commands: Record<string, (state: CometState) => Promise<CometResult>>;
	constructor(prefix: string, commandSets: any[], middlewares?: Array<Middleware | MiddlewareFn>);
	handle(state: CometState): Promise<CometResult>;
	protected checkMethod(request: CometRequest): boolean;
	protected checkContentType(request: CometRequest): boolean;
}
export declare function Cmd(name?: MetaArg<string>): (t: any, p?: string) => void;
export declare namespace Cmd {
	var read: (t: any, p?: string) => any;
	var SetEnv: typeof SetEnv;
	var Omit: typeof Omit$1;
	var Remap: typeof Remap;
	var Middleware: typeof Middleware$1;
	var Arg: typeof Arg;
	var Param: typeof Param;
	var Env: typeof Env;
	var File: typeof File$1;
	var Header: typeof Header;
	var Cookie: typeof Cookie;
	var State: typeof State;
}
declare function SetEnv(key: string | symbol, value: any): (t: any, p?: string) => void;
declare namespace SetEnv {
	var read: (t: any, p?: string) => {};
}
declare function Omit$1(...method: [
	string,
	...string[]
]): (t: any) => void;
declare namespace Omit$1 {
	var read: (t: any) => any;
}
declare function Remap(map: Record<string, string>): (t: any) => void;
declare namespace Remap {
	var read: (t: any) => any;
}
declare function Middleware$1(...middlewares: Array<CometMiddlewareKind>): (t: any, p?: string) => void;
declare namespace Middleware$1 {
	var read: (t: any, p?: string) => Array<CometMiddlewareKind>;
}
declare function Arg(t: any, p: string, index: number): void;
declare namespace Arg {
	var read: (t: any, p: string) => any;
}
declare function Param(t: any, p: string, index: number): void;
declare namespace Param {
	var read: (t: any, p: string) => any;
}
declare function Env(t: any, p: string, index: number): void;
declare namespace Env {
	var read: (t: any, p: string) => any;
}
declare function File$1(t: any, p: string, index: number): void;
declare namespace File$1 {
	var read: (t: any, p: string) => any;
}
declare function Header(t: any, p: string, index: number): void;
declare namespace Header {
	var read: (t: any, p: string) => any;
}
declare function Cookie(t: any, p: string, index: number): void;
declare namespace Cookie {
	var read: (t: any, p: string) => any;
}
declare function State(t: any, p: string, index: number): void;
declare namespace State {
	var read: (t: any, p: string) => any;
}
export declare function fqn(value: TemplateStringsArray): string;
export declare class FileServerApi extends PrefixApi {
	readonly path: string;
	constructor(prefix: string, path: string, middlewares?: Array<CometMiddlewareKind>);
	protected handle(state: CometState): Promise<CometResult>;
	protected checkMethod(request: CometRequest): boolean;
}
export type ErrorHandler = (error: any) => Promise<CometResult | null>;
export declare function cmw_errorHandler(...handlers: Array<ErrorHandler>): CometMiddlewareFn;
export declare function unexpectedErrorHandler(log?: undefined | ((error: any) => void)): (error: any) => Promise<CometResult>;
export declare function zodErrorHandler(): (error: any) => Promise<CometResult | null>;
export declare function responseExceptionHandler(): (error: any) => Promise<CometResult | null>;
export declare function cmw_log(requestLogger?: undefined | ((state: CometState) => void), responseLogger?: undefined | ((state: CometState, result: CometResult, time: number) => void)): CometMiddlewareFn;
export declare function cmw_guard(guard: (state: CometState) => void | Promise<void>): CometMiddlewareFn;
export type ZodLike = {
	safeParse: (arg: any) => {
		success: boolean;
		data: any;
		error: {
			issues: any;
		};
	};
};
export declare function cmw_validate(argsValidator?: ZodLike, paramsValidator?: ZodLike): CometMiddlewareFn;
export type AuthData = {
	/** User id */
	uid: number | string;
	/** Extra data */
	ext: any;
	/** Integrity id */
	int: string | number;
};
export type AuthToken = {
	/** User id */
	uid: number | string;
	/** Extra data */
	ext: any;
	/** Original token */
	ori: boolean;
};
export type RefreshToken = {
	/** User id */
	uid: number | string;
	/** Integrity id */
	int: string | number;
	ssi: boolean;
};
export interface TokenEncoder {
	/**
	 * Read the token and return the value or undefined if the token does not exist, or false is invalid
	 * @param token
	 */
	readAuthToken(token: string | undefined): AuthToken | undefined | false;
	/**
	 * Read the token and return the value or undefined if the token does not exist, or false is invalid
	 * @param token
	 */
	readRefreshToken(token: string | undefined): RefreshToken | undefined | false;
	/**
	 * Create a token from the value and set the timeout
	 * @param value
	 * @param timeout
	 */
	createAuthToken(value: AuthToken, timeout: number): string;
	/**
	 * Create a token from the value and set the timeout
	 * @param value
	 * @param timeout
	 */
	createRefreshToken(value: RefreshToken, timeout: number): string;
}
export interface TokenHandler {
	/**
	 * Get the auth token value from the request event. Returns undefined if the token does not exist, or false is invalid
	 * @param request
	 */
	getAuthToken(request: any): AuthToken | undefined | false;
	/**
	 * Get the refresh token value from the request event. Returns undefined if the token does not exist, or false is invalid
	 * @param request
	 */
	getRefreshToken(request: any): RefreshToken | undefined | false;
	/**
	 * Set the auth token value
	 * @param result
	 * @param value
	 * @param staySignedIn
	 */
	setAuthToken(result: CometResult, value: AuthToken, staySignedIn?: boolean): void;
	/**
	 * Set the refresh token value
	 * @param result
	 * @param value
	 * @param staySignedIn
	 */
	setRefreshToken(result: CometResult, value: RefreshToken, staySignedIn?: boolean): void;
	/**
	 * Delete the auth token
	 * @param result
	 */
	deleteAuthToken(result: CometResult): void;
	/**
	 * Delete the refresh token
	 * @param result
	 */
	deleteRefreshToken(result: CometResult): void;
}
export declare function getAuthState(state: CometState): AuthState;
export declare function setAuthState(state: CometState, authState: AuthState): AuthState;
declare class AuthEventSingIn {
	readonly authData: AuthData;
	readonly staySignedIn: boolean;
	constructor(authData: AuthData, staySignedIn?: boolean);
}
declare class AuthEventSignOut {
}
export declare class AuthState {
	readonly auth: AuthToken | undefined;
	readonly int?: (string | number) | undefined;
	readonly staySignedIn: boolean;
	private tokenExists;
	constructor(auth: AuthToken | undefined, int?: (string | number) | undefined, staySignedIn?: boolean);
	signIn(uid: number, ext: any, int: string | number, staySignedIn?: boolean): void;
	signOut(): void;
	protected eventRaised: false | AuthEventSingIn | AuthEventSignOut;
	hasSignInEvent(): boolean;
	hasSignOutEvent(): boolean;
	getSignInEvent(): AuthEventSingIn;
	isRefreshRequested(): boolean;
	isRefreshable(): string | number | false | undefined;
	needCleanup(): boolean;
	hasToken(): void;
}
export declare function cmw_authGuard(guard: (state: AuthState) => boolean | Promise<boolean>): CometMiddlewareFn;
export type AuthResolver = (uid: number | string) => Promise<AuthData | undefined>;
export declare function cmw_tokenAuth(tokenHandler: TokenHandler, authResolver: AuthResolver): CometMiddleware;
export declare class TokenAuthMiddleware implements CometMiddleware {
	protected tokenHandler: TokenHandler;
	protected authResolver: (uid: number | string) => Promise<AuthData | undefined>;
	constructor(tokenHandler: TokenHandler, authResolver: (uid: number | string) => Promise<AuthData | undefined>);
	handle(state: CometState, next: Function): Promise<CometResult>;
	protected createAuthState(state: CometState): Promise<AuthState>;
}
export declare class TokenHandlerHeader implements TokenHandler {
	protected tokenAdapter: TokenEncoder;
	protected authTokenTimeout: number;
	protected refreshTokenTimeout: number;
	protected authTokenHeader: string;
	protected refreshTokenHeader: string;
	protected staySignedInAuthTokenTimeout: number;
	protected staySignedInRefreshTokenTimeout: number;
	constructor(tokenAdapter: TokenEncoder, authTokenTimeout?: number, // 10 minutes
	refreshTokenTimeout?: number, // 30 minutes
	authTokenHeader?: string, refreshTokenHeader?: string, staySignedInAuthTokenTimeout?: number, // 15 minutes
	staySignedInRefreshTokenTimeout?: number);
	setAuthToken(result: CometResult, value: AuthToken, staySignedIn?: boolean): void;
	setRefreshToken(result: CometResult, value: RefreshToken, staySignedIn?: boolean): void;
	deleteAuthToken(result: CometResult): void;
	deleteRefreshToken(result: CometResult): void;
	getAuthToken(state: CometState): false | AuthToken | undefined;
	getRefreshToken(state: CometState): false | RefreshToken | undefined;
}
export declare class TokenHandlerCookie implements TokenHandler {
	protected tokenAdapter: TokenEncoder;
	protected authTokenTimeout: number;
	protected refreshTokenTimeout: number;
	protected authTokenCookie: string;
	protected refreshTokenCookie: string;
	protected staySignedInAuthTokenTimeout: number;
	protected staySignedInRefreshTokenTimeout: number;
	constructor(tokenAdapter: TokenEncoder, authTokenTimeout?: number, // 10 minutes
	refreshTokenTimeout?: number, // 30 minutes
	authTokenCookie?: string, refreshTokenCookie?: string, staySignedInAuthTokenTimeout?: number, // 15 minutes
	staySignedInRefreshTokenTimeout?: number);
	setAuthToken(result: CometResult, value: AuthToken, staySignedIn?: boolean): void;
	setRefreshToken(result: CometResult, value: RefreshToken, staySignedIn?: boolean): void;
	deleteAuthToken(result: CometResult): void;
	deleteRefreshToken(result: CometResult): void;
	getAuthToken(request: CometState): false | AuthToken | undefined;
	getRefreshToken(request: CometState): false | RefreshToken | undefined;
}
export interface JWT {
	decode(token: string): any;
	encode(value: any, timeout: number): any;
}
export declare class JwtTokenEncoder implements TokenEncoder {
	private jwt;
	constructor(jwt: JWT);
	createAuthToken(value: AuthToken, timeout: number): any;
	createRefreshToken(value: RefreshToken, timeout: number): any;
	readAuthToken(token: string | undefined): AuthToken | undefined | false;
	readRefreshToken(token: string | undefined): RefreshToken | undefined | false;
}

export {};
